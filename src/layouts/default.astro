---
import ControlPanel from "../components/ControlPanel.astro";
import MainNav from "../components/MainNav.astro";
---

<html lang="en" class="dark w-full h-full">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>colin-thornton</title>
    <script>
      const savedTheme = localStorage.getItem("theme");
      if (
        savedTheme === "light" ||
        (!savedTheme &&
          window.matchMedia("(prefers-color-scheme: light)").matches)
      ) {
        document.documentElement.classList.remove("dark");
      }
    </script>
  </head>
  <body
    class="w-full h-full text-gray-900 bg-gray-300 dark:text-gray-50 dark:bg-gray-900"
  >
    <div
      class="w-full h-full overflow-hidden grid grid-cols-[auto,auto,1fr] grid-rows-[auto,1fr]"
    >
      <header class="col-span-3 flex items-center justify-between py-2 px-3">
        <h1 class="text-xl">colin-thornton</h1>
      </header>
      <ControlPanel class="" />
      <MainNav class="" />
      <main
        class="min-w-[100vw] sm:min-w-[unset] bg-gray-50 dark:bg-gray-700 duration-200 ease-in transition-transform relative overflow-auto"
      >
        <button
          id="menu-toggle"
          class="w-4 h-4 grid grid-rows-3 gap-1 absolute top-2 left-2 sm:hidden z-10"
        >
          <div class="h-full bg-gray-900 dark:bg-gray-50 rounded-sm"></div>
          <div class="h-full bg-gray-900 dark:bg-gray-50 rounded-sm"></div>
          <div class="h-full bg-gray-900 dark:bg-gray-50 rounded-sm"></div>
        </button>
        <slot />
      </main>
    </div>
  </body>
</html>

<script>
  const main = document.querySelector("main") as HTMLElement;
  const menuToggle = document.getElementById(
    "menu-toggle"
  ) as HTMLButtonElement;
  let pointerId: number | null = null;
  let startX = 0;
  let menuOpen = true;
  let timeoutId: number;

  if (isMobileSize()) {
    main.style.transition = "none";
    closeMenu();
    main.style.removeProperty("transition");
  }
  document.body.addEventListener("pointerdown", initiateSwipe);
  document.body.addEventListener("pointermove", updateSwipe);
  document.body.addEventListener("pointerup", endSwipe);
  menuToggle.addEventListener("click", () => {
    menuOpen ? closeMenu() : openMenu();
  });
  window.addEventListener("resize", () => {
    if (!isMobileSize() && !menuOpen) openMenu();
  });

  function initiateSwipe(e: PointerEvent) {
    if (pointerId || !isMobileSize()) return;
    pointerId = e.pointerId;
    startX = e.x;
    main.style.transition = "none";
  }

  function updateSwipe(e: PointerEvent) {
    if (e.pointerId !== pointerId) return;
    window.clearTimeout(timeoutId);
    const offset = clamp(
      -main.offsetLeft,
      0,
      menuOpen ? (startX - e.x) * -1 : -main.offsetLeft + e.x - startX
    );
    main.style.transform = `translate3d(${offset}px, 0, 0)`;
    timeoutId = window.setTimeout(() => endSwipe(e), 1000);
  }

  function endSwipe(e: PointerEvent) {
    if (e.pointerId !== pointerId) return;
    main.style.removeProperty("transition");
    const diff = e.x - startX;
    if (menuOpen) {
      if (diff <= -100) {
        closeMenu();
      } else {
        openMenu();
      }
    } else {
      if (diff >= 100) {
        openMenu();
      } else {
        closeMenu();
      }
    }
    pointerId = null;
  }

  function openMenu() {
    main.style.removeProperty("transform");
    menuOpen = true;
  }

  function closeMenu() {
    main.style.transform = `translate3d(${main.offsetLeft * -1}px, 0, 0)`;
    menuOpen = false;
  }

  function clamp(min: number, max: number, value: number) {
    if (value < min) return min;
    if (value > max) return max;
    return value;
  }

  function isMobileSize() {
    return window.innerWidth < 640;
  }
</script>
